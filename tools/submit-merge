#!/usr/bin/env python
#
# Copyright European Organization for Nuclear Research (CERN)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Martin Barisits, <martin.barisits@cern.ch>, 2015
# - Wen Guan, <wen.guan@cern.ch>, 2016

import subprocess
import sys
import json
import requests
import os

requests.packages.urllib3.disable_warnings()

project_url = "https://api.github.com/repos/PanDAWMS/pilot-2.0/pulls"


def submit_merge_request(token, data):
    r = requests.post(url=project_url,
                      headers={"Content-Type": "application/json",
                               "Authorization": "token %s" % token},
                      data=json.dumps(data))
    return r


def getstatusoutput(cmd, redirect_output=True, shell=False):
    if shell:
        cmd = ['sh', '-c', cmd]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE if redirect_output else None, stderr=subprocess.STDOUT)
    output = proc.communicate()[0]
    return proc.returncode, output

root_git_dir = getstatusoutput(['git', 'rev-parse', '--show-toplevel'])[1].strip()

# Load private_token
print 'Loading private token ...',
try:
    with open(os.path.join(root_git_dir, '.githubkey'), 'r') as f:
        private_token = f.readline().strip()
        print 'OK'
except IOError or ValueError:
    print 'ERROR'
    print 'No github keyfile found at %s' % os.path.join(root_git_dir, '.githubkey')
    sys.exit(-1)

# Get current repo
print "Loading current repo ...",
push_url = getstatusoutput(['git', 'remote', 'show', '-n', 'origin'])[1]
push_url = filter(lambda x: x.startswith("Push"), map(str.strip, push_url.split("\n")))[0].rsplit(" ", 1)[1]
origin_repo = push_url.split(":")[1].split("/")[0]
print origin_repo

# Check if current branch is not master or dev or hotfix
print 'Checking if current branch is a patch/dev/hotfix branch ...',
current_branch = getstatusoutput(['git', 'rev-parse', '--abbrev-ref', 'HEAD'])[1].strip()
commit_msg = current_branch
for line in getstatusoutput(['git', 'show'])[1].splitlines():
    if line.strip().startswith('[PILOT-'):
        commit_msg = line.strip()
if current_branch == 'master' or current_branch == 'dev' or current_branch == 'hotfix':
    print 'ERROR'
    print 'You are currently on branch \'%s\'. Please change to a dev/patch/hotfix branch.' % current_branch
    sys.exit(-1)
if not current_branch.startswith('patch') and not current_branch.startswith('dev') \
        and not current_branch.startswith('hotfix'):
    print 'ERROR'
    print 'You are currently on branch \'%s\'. This is not a dev/patch/hotfix branch.' % current_branch
    sys.exit(-1)
print 'OK'

# Push the branch to origin
print 'Pushing the dev/patch/hotfix branch to origin ...',
op = getstatusoutput(['git', 'push', 'origin', current_branch])
if op[0] == 0:
    print 'OK'
else:
    print 'ERROR'
    print op[1]
    sys.exit(-1)

# Check if there is already a merge request for this:
print 'Checking if there already exists a merge request for this dev/patch/hotfix ...',
resp = requests.get(url='%s' % project_url,
                    params={'state': 'open'})
mr_list = json.loads(resp.text)
# print mr_list
for mr in mr_list:
    # print mr
    if current_branch in mr['head']['ref'] and mr['state'] == 'open':
        print 'ERROR'
        print 'There is already an open Merge Request for this branch.'
        sys.exit(-1)
print 'OK'

# Create the Merge-requests
if current_branch.startswith('hotfix'):
    print 'Submitting merge request against hotfix ...',
    result = submit_merge_request(token=private_token,
                                  data={'head': '%s:%s' % (origin_repo, current_branch),
                                        'base': 'hotfix',
                                        'title': commit_msg,
                                        'body': commit_msg})
    if result.status_code == 200 or result.status_code == 201:
        print 'OK'
    else:
        print 'ERROR'
        print result.content

if current_branch.startswith('patch') or current_branch.startswith('hotfix'):
    print 'Submitting merge request against master ...',
    result = submit_merge_request(token=private_token,
                                  data={'head': '%s:%s' % (origin_repo, current_branch),
                                        'base': 'master',
                                        'title': commit_msg,
                                        'body': commit_msg})
    if result.status_code == 200 or result.status_code == 201:
        print 'OK'
    else:
        print 'ERROR'
        print result.content


print 'Submitting merge request against dev ...',
result = submit_merge_request(token=private_token,
                              data={'head': '%s:%s' % (origin_repo, current_branch),
                                    'base': 'dev',
                                    'title': commit_msg,
                                    'body': commit_msg})
if result.status_code == 200 or result.status_code == 201:
    print 'OK'
else:
    print 'ERROR'
    print result.content
